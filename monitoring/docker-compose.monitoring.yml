services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: notes-monitoring-database
    environment:
      POSTGRES_USER: notesuser
      POSTGRES_PASSWORD: notespassword
      POSTGRES_DB: notesdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../microservices/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notesuser -d notesdb"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring-network

  # Notes Service
  notes-service:
    build:
      context: ../microservices
      dockerfile: notes-service/Dockerfile
    container_name: notes-service
    environment:
      DATABASE_URL: postgresql+asyncpg://notesuser:notespassword@database:5432/notesdb
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      SERVICE_NAME: notes-service
      ENVIRONMENT: production
    ports:
      - "8001:8001"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring-network
    restart: unless-stopped

  # Folders Service
  folders-service:
    build:
      context: ../microservices
      dockerfile: folders-service/Dockerfile
    container_name: folders-service
    environment:
      DATABASE_URL: postgresql+asyncpg://notesuser:notespassword@database:5432/notesdb
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      SERVICE_NAME: folders-service
      ENVIRONMENT: production
    ports:
      - "8002:8002"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ../microservices
      dockerfile: api-gateway/Dockerfile
    container_name: api-gateway
    environment:
      NOTES_SERVICE_URL: http://notes-service:8001
      FOLDERS_SERVICE_URL: http://folders-service:8002
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      SERVICE_NAME: api-gateway
      ENVIRONMENT: production
    ports:
      - "8000:8000"
    depends_on:
      notes-service:
        condition: service_healthy
      folders-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - monitoring-network
    restart: unless-stopped

  # Frontend (React App)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: notes-frontend
    ports:
      - "80:80"
    depends_on:
      api-gateway:
        condition: service_healthy
    networks:
      - monitoring-network
    restart: unless-stopped

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/config:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:9.5.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/config/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:1.42
    container_name: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector HTTP
      - "14250:14250"  # Jaeger collector gRPC
      - "6831:6831/udp"  # Jaeger agent UDP
      - "6832:6832/udp"  # Jaeger agent UDP
      - "5778:5778"   # Jaeger agent HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - monitoring-network
    restart: unless-stopped

  # PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.12.0
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://notesuser:notespassword@database:5432/notesdb?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - monitoring-network
    restart: unless-stopped

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - monitoring-network
    restart: unless-stopped

  # cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring-network
    restart: unless-stopped

  # Loki (Log aggregation)
  loki:
    image: grafana/loki:2.8.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network
    restart: unless-stopped

  # Promtail (Log collection)
  promtail:
    image: grafana/promtail:2.8.0
    container_name: promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail/config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - loki

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  monitoring-network:
    driver: bridge 